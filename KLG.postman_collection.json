{
	"info": {
		"_postman_id": "0f639e2a-6e37-457c-889b-f4bdb61a0f8c",
		"name": "KLG",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "13901780"
	},
	"item": [
		{
			"name": "Login",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"//-------------------------------------------------------\r",
							"let jsonData = pm.response.json();\r",
							"\r",
							"pm.test(jsonData.message, function () {\r",
							"    pm.expect(jsonData.code).to.eql(200)\r",
							"});\r",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"protocolProfileBehavior": {
				"disableBodyPruning": true
			},
			"request": {
				"auth": {
					"type": "noauth"
				},
				"method": "GET",
				"header": [
					{
						"key": "accept",
						"value": "application/json"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{base_url}}/user/login?username={{username}}&password={{password}}",
					"host": [
						"{{base_url}}"
					],
					"path": [
						"user",
						"login"
					],
					"query": [
						{
							"key": "username",
							"value": "{{username}}"
						},
						{
							"key": "password",
							"value": "{{password}}"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Create User",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"//-------------------------------------------------------\r",
							"var jsonData = pm.response.json();\r",
							"var userID = jsonData.message;\r",
							"\r",
							"pm.test(\"Assert status code by response is 200 with User ID \" + userID , function () {\r",
							"    pm.expect(jsonData.code).to.eql(200)\r",
							"});\r",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"let jsonData = JSON.parse(pm.request.body);\r",
							"\r",
							"pm.test(\"Request Data Type Assertion\", function () {\r",
							"    pm.expect(jsonData.id).to.be.a('number');\r",
							"    pm.expect(jsonData.username).to.be.a('string');\r",
							"    pm.expect(jsonData.firstName).to.be.a('string');\r",
							"    pm.expect(jsonData.lastName).to.be.a('string');\r",
							"    pm.expect(jsonData.email).to.be.a('string');\r",
							"    pm.expect(jsonData.password).to.be.a('string');\r",
							"    pm.expect(jsonData.phone).to.be.a('string');\r",
							"    pm.expect(jsonData.userStatus).to.be.a('number');\r",
							"});"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "accept",
						"value": "application/json"
					},
					{
						"key": "Content-Type",
						"value": "application/json"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\n  \"id\": 77,\n  \"username\": \"{{username}}\",\n  \"firstName\": \"{{firstName}}\",\n  \"lastName\": \"{{lastName}}\",\n  \"email\": \"{{email}}\",\n  \"password\": \"{{password}}\",\n  \"phone\": \"{{[phone]}}\",\n  \"userStatus\": 1\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{base_url}}/user",
					"host": [
						"{{base_url}}"
					],
					"path": [
						"user"
					]
				}
			},
			"response": []
		},
		{
			"name": "Get User",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"//-------------------------------------------------------\r",
							"let jsonData = pm.response.json();\r",
							"\r",
							"pm.test(\"Response Property Data Type Assertion\", function () {\r",
							"    pm.expect(jsonData.id).to.be.a('number');\r",
							"    pm.expect(jsonData.username).to.be.a('string');\r",
							"    pm.expect(jsonData.firstName).to.be.a('string');\r",
							"    pm.expect(jsonData.lastName).to.be.a('string');\r",
							"    pm.expect(jsonData.email).to.be.a('string');\r",
							"    pm.expect(jsonData.password).to.be.a('string');\r",
							"    pm.expect(jsonData.phone).to.be.a('string');\r",
							"    pm.expect(jsonData.userStatus).to.be.a('number');\r",
							"});\r",
							"\r",
							"//-------------------------------------------------------\r",
							"pm.test(\"Response is not null\", function () {\r",
							"    pm.expect(jsonData).to.not.be.null;\r",
							"});"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [
					{
						"key": "accept",
						"value": "application/json"
					}
				],
				"url": {
					"raw": "{{base_url}}/user/user1",
					"host": [
						"{{base_url}}"
					],
					"path": [
						"user",
						"user1"
					]
				}
			},
			"response": []
		},
		{
			"name": "Update User",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"//-------------------------------------------------------\r",
							"var jsonData = pm.response.json();\r",
							"var userID = jsonData.message;\r",
							"\r",
							"pm.test(\"Assert status code by response is 200 with UPDATED User ID \" + userID , function () {\r",
							"    pm.expect(jsonData.code).to.eql(200)\r",
							"});\r",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"let jsonData = JSON.parse(pm.request.body);\r",
							"\r",
							"pm.test(\"Request Data Type Assertion\", function () {\r",
							"    pm.expect(jsonData.id).to.be.a('number');\r",
							"    pm.expect(jsonData.username).to.be.a('string');\r",
							"    pm.expect(jsonData.firstName).to.be.a('string');\r",
							"    pm.expect(jsonData.lastName).to.be.a('string');\r",
							"    pm.expect(jsonData.email).to.be.a('string');\r",
							"    pm.expect(jsonData.password).to.be.a('string');\r",
							"    pm.expect(jsonData.phone).to.be.a('string');\r",
							"    pm.expect(jsonData.userStatus).to.be.a('number');\r",
							"});"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "PUT",
				"header": [
					{
						"key": "accept",
						"value": "application/json"
					},
					{
						"key": "Content-Type",
						"value": "application/json"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\n  \"id\": 100,\n  \"username\": \"{{updateUser}}\",\n  \"firstName\": \"{{firstName}}\",\n  \"lastName\": \"{{lastName}}\",\n  \"email\": \"{{email}}\",\n  \"password\": \"{{password}}\",\n  \"phone\": \"{{[phone]}}\",\n  \"userStatus\": 0\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "https://petstore.swagger.io/v2/user/user1",
					"protocol": "https",
					"host": [
						"petstore",
						"swagger",
						"io"
					],
					"path": [
						"v2",
						"user",
						"user1"
					]
				}
			},
			"response": []
		},
		{
			"name": "Logout",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Logged Out Successfully - Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [
					{
						"key": "accept",
						"value": "application/json"
					}
				],
				"url": {
					"raw": "{{base_url}}/user/logout",
					"host": [
						"{{base_url}}"
					],
					"path": [
						"user",
						"logout"
					]
				}
			},
			"response": []
		}
	]
}